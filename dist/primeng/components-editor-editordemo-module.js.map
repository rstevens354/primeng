{"version":3,"sources":["webpack:///./src/app/components/editor/editor.ts","webpack:///./src/app/showcase/components/editor/editordemo-routing.module.ts","webpack:///./src/app/showcase/components/editor/editordemo.html","webpack:///./src/app/showcase/components/editor/editordemo.module.ts","webpack:///./src/app/showcase/components/editor/editordemo.ts"],"names":[],"mappings":"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","file":"components-editor-editordemo-module.js","sourcesContent":["import {NgModule,Component,ElementRef,AfterViewInit,Input,Output,EventEmitter,ContentChild,OnChanges,forwardRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule,Header} from '../common/shared'\r\nimport {DomHandler} from '../dom/domhandler';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\ndeclare var Quill: any;\r\n\r\nexport const EDITOR_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => Editor),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-editor',\r\n    template: `\r\n        <div [ngClass]=\"'ui-widget ui-editor-container ui-corner-all'\" [class]=\"styleClass\">\r\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"toolbar\">\r\n                <ng-content select=\"p-header\"></ng-content>\r\n            </div>\r\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"!toolbar\">\r\n                <span class=\"ql-formats\">\r\n                    <select class=\"ql-header\">\r\n                      <option value=\"1\">Heading</option>\r\n                      <option value=\"2\">Subheading</option>\r\n                      <option selected>Normal</option>\r\n                    </select>\r\n                    <select class=\"ql-font\">\r\n                      <option selected>Sans Serif</option>\r\n                      <option value=\"serif\">Serif</option>\r\n                      <option value=\"monospace\">Monospace</option>\r\n                    </select>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <button class=\"ql-bold\" aria-label=\"Bold\"></button>\r\n                    <button class=\"ql-italic\" aria-label=\"Italic\"></button>\r\n                    <button class=\"ql-underline\" aria-label=\"Underline\"></button>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <select class=\"ql-color\"></select>\r\n                    <select class=\"ql-background\"></select>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <button class=\"ql-list\" value=\"ordered\" aria-label=\"Ordered List\"></button>\r\n                    <button class=\"ql-list\" value=\"bullet\" aria-label=\"Unordered List\"></button>\r\n                    <select class=\"ql-align\">\r\n                        <option selected></option>\r\n                        <option value=\"center\"></option>\r\n                        <option value=\"right\"></option>\r\n                        <option value=\"justify\"></option>\r\n                    </select>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <button class=\"ql-link\" aria-label=\"Insert Link\"></button>\r\n                    <button class=\"ql-image\" aria-label=\"Insert Image\"></button>\r\n                    <button class=\"ql-code-block\" aria-label=\"Insert Code Block\"></button>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <button class=\"ql-clean\" aria-label=\"Remove Styles\"></button>\r\n                </span>\r\n            </div>\r\n            <div class=\"ui-editor-content\" [ngStyle]=\"style\"></div>\r\n        </div>\r\n    `,\r\n    providers: [EDITOR_VALUE_ACCESSOR]\r\n})\r\nexport class Editor implements AfterViewInit,ControlValueAccessor {\r\n        \r\n    @Output() onTextChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onSelectionChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ContentChild(Header) toolbar;\r\n    \r\n    @Input() style: any;\r\n        \r\n    @Input() styleClass: string;\r\n    \r\n    @Input() placeholder: string;\r\n    \r\n    @Input() formats: string[];\r\n\r\n    @Input() modules: any;\r\n\r\n    @Input() bounds: any;\r\n\r\n    @Input() scrollingContainer: any;\r\n\r\n    @Input() debug: string;\r\n    \r\n    @Output() onInit: EventEmitter<any> = new EventEmitter();\r\n    \r\n    value: string;\r\n    \r\n    _readonly: boolean;\r\n    \r\n    onModelChange: Function = () => {};\r\n    \r\n    onModelTouched: Function = () => {};\r\n    \r\n    quill: any;\r\n    \r\n    constructor(public el: ElementRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        let editorElement = DomHandler.findSingle(this.el.nativeElement ,'div.ui-editor-content'); \r\n        let toolbarElement = DomHandler.findSingle(this.el.nativeElement ,'div.ui-editor-toolbar'); \r\n        let defaultModule  = {toolbar: toolbarElement};\r\n        let modules = this.modules ? {...defaultModule, ...this.modules} : defaultModule;\r\n\r\n        this.quill = new Quill(editorElement, {\r\n          modules: modules,\r\n          placeholder: this.placeholder,\r\n          readOnly: this.readonly,\r\n          theme: 'snow',\r\n          formats: this.formats,\r\n          bounds: this.bounds,\r\n          debug: this.debug,\r\n          scrollingContainer: this.scrollingContainer\r\n        });\r\n                \r\n        if(this.value) {\r\n            this.quill.pasteHTML(this.value);\r\n        }\r\n        \r\n        this.quill.on('text-change', (delta, oldContents, source) => {\r\n            if (source === 'user') {\r\n                let html = editorElement.children[0].innerHTML;\r\n                let text = this.quill.getText().trim();\r\n                if (html === '<p><br></p>') {\r\n                    html = null;\r\n                }\r\n\r\n                this.onTextChange.emit({\r\n                    htmlValue: html,\r\n                    textValue: text,\r\n                    delta: delta,\r\n                    source: source\r\n                });\r\n                \r\n                this.onModelChange(html);\r\n                this.onModelTouched();\r\n            }\r\n        });\r\n        \r\n        this.quill.on('selection-change', (range, oldRange, source) => {\r\n            this.onSelectionChange.emit({\r\n                range: range,\r\n                oldRange: oldRange,\r\n                source: source\r\n            });\r\n        });\r\n        \r\n        this.onInit.emit({\r\n            editor: this.quill\r\n        });\r\n    }\r\n        \r\n    writeValue(value: any) : void {\r\n        this.value = value;\r\n                \r\n        if(this.quill) {\r\n            if(value)\r\n                this.quill.pasteHTML(value);\r\n            else\r\n                this.quill.setText('');\r\n        }\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    getQuill() {\r\n        return this.quill;\r\n    }\r\n    \r\n    @Input() get readonly(): boolean {\r\n        return this._readonly;\r\n    }\r\n\r\n    set readonly(val:boolean) {\r\n        this._readonly = val;\r\n        \r\n        if(this.quill) {\r\n            if(this._readonly)\r\n                this.quill.disable();\r\n            else\r\n                this.quill.enable();\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Editor,SharedModule],\r\n    declarations: [Editor]\r\n})\r\nexport class EditorModule { }","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {EditorDemo} from './editordemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: EditorDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class EditorDemoRoutingModule {}\r\n","module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Editor</span>\\r\\n        <span>Editor is rich text editor component based on Quill.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Default</h3>\\r\\n    <p-editor [(ngModel)]=\\\"text1\\\" [style]=\\\"{'height':'320px'}\\\"></p-editor>\\r\\n    <p>Value: {{text1||'empty'}}</p>\\r\\n    \\r\\n    <button pButton type=\\\"button\\\" label=\\\"Clear\\\" icon=\\\"pi pi-times\\\" (click)=\\\"text1=null\\\"></button>\\r\\n    \\r\\n    <hr style=\\\"border-top:0px;border-color:#dde3e6\\\">\\r\\n    \\r\\n    <h3>Custom Toolbar</h3>\\r\\n    <p-editor [(ngModel)]=\\\"text2\\\" [style]=\\\"{'height':'320px'}\\\">\\r\\n        <p-header>\\r\\n            <span class=\\\"ql-formats\\\">\\r\\n                <button class=\\\"ql-bold\\\" aria-label=\\\"Bold\\\"></button>\\r\\n                <button class=\\\"ql-italic\\\" aria-label=\\\"Italic\\\"></button>\\r\\n                <button class=\\\"ql-underline\\\" aria-label=\\\"Underline\\\"></button>\\r\\n            </span>\\r\\n        </p-header>\\r\\n    </p-editor>\\r\\n    <p>Value: {{text2||'empty'}}</p>\\r\\n    \\r\\n    <button pButton type=\\\"button\\\" label=\\\"Clear\\\" icon=\\\"pi pi-times\\\" (click)=\\\"text2=null\\\"></button>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;EditorModule&#125; from 'primeng/editor';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>Two-way value binding is defined with ngModel.</p>\\r\\n            \\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-editor [(ngModel)]=\\\"text\\\" [style]=\\\"&#123;'height':'320px'&#125;\\\"&gt;&lt;/p-editor&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class EditorDemo &#123;\\r\\n    \\r\\n    text: string;\\r\\n        \\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Model Driven Forms</h3>\\r\\n            <p>Editor can be used in a model driven form as well.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-editor formControlName=\\\"description\\\" [style]=\\\"&#123;'height':'320px'&#125;\\\"&gt;&lt;/p-editor&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Toolbar</h3>\\r\\n            <p>Editor provides a default toolbar with common options, to customize it define your elements inside the header element. Refer to <a href=\\\"http://quilljs.com/docs/modules/toolbar/\\\">Quill documentation</a> for available controls.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-editor [(ngModel)]=\\\"text2\\\" [style]=\\\"&#123;'height':'320px'&#125;\\\"&gt;\\r\\n    &lt;p-header&gt;\\r\\n        &lt;span class=\\\"ql-format-group\\\"&gt;\\r\\n            &lt;span title=\\\"Bold\\\" class=\\\"ql-format-button ql-bold\\\"&gt;&lt;/span&gt;\\r\\n            &lt;span class=\\\"ql-format-separator\\\"&gt;&lt;/span&gt;\\r\\n            &lt;span title=\\\"Italic\\\" class=\\\"ql-format-button ql-italic\\\"&gt;&lt;/span&gt;\\r\\n            &lt;span class=\\\"ql-format-separator\\\"&gt;&lt;/span&gt;\\r\\n            &lt;span title=\\\"Underline\\\" class=\\\"ql-format-button ql-underline\\\"&gt;&lt;/span&gt;\\r\\n            &lt;span class=\\\"ql-format-separator\\\"&gt;&lt;/span&gt;\\r\\n            &lt;span title=\\\"Strikethrough\\\" class=\\\"ql-format-button ql-strike\\\"&gt;&lt;/span&gt;\\r\\n        &lt;/span&gt;\\r\\n    &lt;/p-header&gt;\\r\\n&lt;/p-editor&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the container.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the container.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>placeholder</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Placeholder text to show when editor is empty.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>readonly</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether to instantiate the editor to read-only mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>formats</td>\\r\\n                            <td>string[]</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Whitelist of formats to display, see <a href=\\\"http://quilljs.com/docs/formats/\\\">here</a> for available options.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>modules</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Modules configuration of Editor, see <a href=\\\"https://quilljs.com/docs/modules/\\\">here</a> for available options.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>debug</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Shortcut for debug. Note debug is a static method and will affect other instances of Quill \\r\\n                                editors on the page. Only warning and error messages are enabled by default.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>bounds</td>\\r\\n                            <td>Element</td>\\r\\n                            <td>document.body</td>\\r\\n                            <td>DOM Element or a CSS selector for a DOM Element, within which the editor’s ui elements (i.e. tooltips, etc.) should be confined. Currently, it only considers left and right boundaries..</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>scrollingContainer</td>\\r\\n                            <td>Element</td>\\r\\n                            <td>null</td>\\r\\n                            <td>DOM Element or a CSS selector for a DOM Element, specifying which container has the scrollbars (i.e. overflow-y: auto), if is has been changed from the default ql-editor with custom CSS. \\r\\n                                Necessary to fix scroll jumping bugs when Quill is set to auto grow its height, and another ancestor container is responsible from the scrolling..</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n            \\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>onTextChange</td>\\r\\n                            <td>event.delta: Representation of the change.<br>\\r\\n                                event.source: Source of change. Will be either \\\"user\\\" or \\\"api\\\".<br>\\r\\n                                event.htmlValue: Current value as html.<br>\\r\\n                                event.textValue: Current value as text.<br></td>\\r\\n                            <td>Callback to invoke when the text of the editor is changed by the user.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onSelectionChange</td>\\r\\n                            <td>event.range: Object with index and length keys indicating where the selection exists.<br>\\r\\n                                event.oldRange: Object with index and length keys indicating where the previous selection was..<br>\\r\\n                                event.source: Source of change. Will be either \\\"user\\\" or \\\"api\\\".</td>\\r\\n                            <td>Callback to invoke when selected text of editor changes.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onInit</td>\\r\\n                            <td>event.editor: Quill editor instance.<br>\\r\\n                                event.oldRange: Object with index and length keys indicating where the previous selection was..<br>\\r\\n                                event.source: Source of change. Will be either \\\"user\\\" or \\\"api\\\".</td>\\r\\n                            <td>Callback to invoke after editor is initialized.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n            \\r\\n            <p>Refer to <a href=\\\"http://beta.quilljs.com/docs/api/#events\\\">Quill documentation</a> for more information.</p>\\r\\n\\r\\n            <h3>Methods</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>getQuill</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Returns the underlying quill instance.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Element</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-editor-container</td>\\r\\n                            <td>Container element</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-editor-toolbar</td>\\r\\n                            <td>Toolbar of the editor</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-editor-content</td>\\r\\n                            <td>Editable area</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p><a href=\\\"http://quilljs.com\\\">Quill</a> Editor 1.0.</p>\\r\\n            <p>Resources of quill needs to be added to your application. Example setup with CLI is as follows;</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\nnpm install quill --save\\r\\n</code>\\r\\n</pre>\\r\\n            <p>Add Quill to scripts in angular-cli.json</p>  \\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n\\\"scripts\\\": [... \\\"../node_modules/quill/dist/quill.js\\\"],\\r\\n</code>\\r\\n</pre>\\r\\n            <p>Add Quill css to styles in angular-cli.json</p>  \\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n\\\"styles\\\": [ ... \\\"../node_modules/quill/dist/quill.core.css\\\", \\\"../node_modules/quill/dist/quill.snow.css\\\"],\\r\\n</code> \\r\\n</pre>        \\r\\n\\r\\n        </p-tabPanel>\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/editor\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Default&lt;/h3&gt;\\r\\n&lt;p-editor [(ngModel)]=\\\"text1\\\" [style]=\\\"&#123;'height':'320px'&#125;\\\"&gt;&lt;/p-editor&gt;\\r\\n&lt;p&gt;Value: &#123;&#123;text1||'empty'&#125;&#125;&lt;/p&gt;\\r\\n\\r\\n&lt;button pButton type=\\\"button\\\" label=\\\"Clear\\\" icon=\\\"pi pi-times\\\" (click)=\\\"text1=null\\\"&gt;&lt;/button&gt;\\r\\n\\r\\n&lt;hr style=\\\"border-top:0px;border-color:#dde3e6\\\"&gt;\\r\\n\\r\\n&lt;h3&gt;Custom Toolbar&lt;/h3&gt;\\r\\n&lt;p-editor [(ngModel)]=\\\"text2\\\" [style]=\\\"&#123;'height':'320px'&#125;\\\"&gt;\\r\\n    &lt;p-header&gt;\\r\\n        &lt;span class=\\\"ql-formats\\\"&gt;\\r\\n            &lt;button class=\\\"ql-bold\\\" aria-label=\\\"Bold\\\"&gt;&lt;/button&gt;\\r\\n            &lt;button class=\\\"ql-italic\\\" aria-label=\\\"Italic\\\"&gt;&lt;/button&gt;\\r\\n            &lt;button class=\\\"ql-underline\\\" aria-label=\\\"Underline\\\"&gt;&lt;/button&gt;\\r\\n        &lt;/span&gt;\\r\\n    &lt;/p-header&gt;\\r\\n&lt;/p-editor&gt;\\r\\n&lt;p&gt;Value: &#123;&#123;text2||'empty'&#125;&#125;&lt;/p&gt;\\r\\n\\r\\n&lt;button pButton type=\\\"button\\\" label=\\\"Clear\\\" icon=\\\"pi pi-times\\\" (click)=\\\"text2=null\\\"&gt;&lt;/button&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;Component&#125; from '@angular/core';\\r\\n\\r\\n@Component(&#123;\\r\\n    templateUrl: './editordemo.html'\\r\\n&#125;)\\r\\nexport class EditorDemo &#123;\\r\\n\\r\\n    text1: string = '&lt;div&gt;Hello World!&lt;/div&gt;&lt;div&gt;PrimeNG &lt;b&gt;Editor&lt;/b&gt; Rocks&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;';\\r\\n    \\r\\n    text2: string;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule}    from '@angular/forms';\r\nimport {EditorDemo} from './editordemo';\r\nimport {EditorDemoRoutingModule} from './editordemo-routing.module';\r\nimport {EditorModule} from '../../../components/editor/editor';\r\nimport {ButtonModule} from '../../../components/button/button';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n        FormsModule,\r\n\t\tEditorDemoRoutingModule,\r\n        EditorModule,\r\n        ButtonModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tEditorDemo\r\n\t]\r\n})\r\nexport class EditorDemoModule {}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './editordemo.html'\r\n})\r\nexport class EditorDemo {\r\n\r\n    text1: string = '<div>Hello World!</div><div>PrimeNG <b>Editor</b> Rocks</div><div><br></div>';\r\n    \r\n    text2: string;\r\n}"],"sourceRoot":""}